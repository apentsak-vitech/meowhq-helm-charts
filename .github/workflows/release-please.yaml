on:
  push:
    branches:
      - main
    paths: 
      - .release-please-manifest.json
      - "charts/**"
name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - id: generate_token
        name: Generate github token of Github Application
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - id: release
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          release-type: helm
          token: ${{ steps.generate_token.outputs.token }}
          command: manifest
          monorepo-tags: true
      # - uses: actions/checkout@v2
      # - name: test
      #   run: |
      #     # find the chart that contains changes
      #     if [ "$(git rev-parse --abbrev-ref HEAD)" == "HEAD" ]; then
      #       # Detached HEAD state, use HEAD~1 instead
      #       CHANGED_CHARTS=$(git diff --name-only HEAD~1 HEAD | grep "^charts/")
      #     else
      #       CHANGED_CHARTS=$(git diff --name-only HEAD^ HEAD | grep "^charts/")
      #     fi

      #     echo "changed charts: $CHANGED_CHARTS"

      #     for chart_dir in $CHANGED_CHARTS; do
      #       echo $chart_dir
      #     done
      # - name: Run chart-releaser
      #   if: ${{ steps.release.outputs.releases_created }}
      #   uses: helm/chart-releaser-action@v1.5.0
      #   env:
      #     CR_TOKEN: ${{ steps.generate_token.outputs.token }}
  get-bumped-charts:
    runs-on: ubuntu-latest
    needs: release-please
    # if: ${{ needs.release-please.outputs.releases_created }}
    name: 'Get modified charts'
    permissions:
      contents: read
    outputs:
      charts: ${{ steps.get-bumped-charts.outputs.charts }}
      result: ${{ steps.get-bumped-charts.outputs.result }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: charts
          fetch-depth: 2 # to be able to obtain files changed in the latest commit
      - id: get-bumped-chart
        name: 'Get modified charts'
        run: |
          echo "---> ${{ needs.release-please.outputs.releases_created }}"
          cd charts
          # get the changed files
          files_changed="$(git show --pretty="" --name-only)"

          # get the directories that includes Chart.yaml file changes to get the charts that changed version
          chart_file_changed="$(echo $files_changed | grep -E 'Chart\.ya?ml' | xargs dirname | grep -o "charts/[^/]*" | sort | uniq || true)"

          # Initialize an empty array for version-changed charts
          version_changed_charts=()

          for chart in $chart_file_changed; do
            # Check if there's a version change in the Chart.yaml file
            if git show "$chart" | grep -q "+version"; then
              version_changed_charts+=("$chart")
            fi
          done
          
          # make the outputs
          if [ ${#version_changed_charts[@]} -gt 0 ]; then
            chart_names=$(printf "%s\n" "${version_changed_charts[@]}")
            echo "charts=${version_changed_charts[@]}" >>$GITHUB_OUTPUT
            echo "result=ok" >>$GITHUB_OUTPUT
          else
            echo "error=No version changed charts found" >>$GITHUB_OUTPUT
            echo "result=fail" >>$GITHUB_OUTPUT
          fi

          # print the outputs
          cat $GITHUB_OUTPUT
      - id: show-error
        name: 'Show error'
        if: ${{ steps.get-bumped-charts.outputs.result == 'fail' }}
        uses: actions/github-script@v6
        with:
          script: |
              core.setFailed('${{ steps.get-bumped-charts.outputs.error }}')
  publish-charts:
    runs-on: ubuntu-latest
    needs: get-bumped-charts
    if: ${{ needs.get-bumped-charts.outputs.result == 'ok' }}
    name: Publish Charts
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
        name: Checkout Repository
      - id: test
        name: test
        run: |
          bumped_charts=${{needs.get-bumped-charts.outputs.charts}}
          for chart_dir in bumped_charts; do
            cd $chart_dir
            cat Chart.yaml
          done
