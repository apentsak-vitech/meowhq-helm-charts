on:
  push:
    branches:
      - main
    paths: 
      - .release-please-manifest.json
      - "charts/**"
name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
    steps:
      - id: generate_token
        name: Generate github token of Github Application
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - id: release
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          release-type: helm
          token: ${{ steps.generate_token.outputs.token }}
          command: manifest
          monorepo-tags: true
      - id: check-changes
        name: test
        run: |
          echo "releases created: ${{ steps.release.outputs.releases_created }}"

  get-bumped-charts:
    runs-on: ubuntu-latest
    needs: release-please
    # if: ${{ needs.release-please.outputs.releases_created }}
    name: 'Get modified charts'
    permissions:
      contents: read
    outputs:
      charts: ${{ steps.get-bumped-charts.outputs.charts }}
      result: ${{ steps.get-bumped-charts.outputs.result }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2 # to be able to obtain files changed in the latest commit
      - id: get-bumped-charts
        name: 'Get modified charts'
        run: |
          echo "---> ${{ needs.release-please.outputs.releases_created }}"
          ls -la

          # get the changed files
          files_changed="$(git show --pretty="" --name-only)"
          echo "files_changed=$files_changed"

          # get the directories that includes Chart.yaml file changes to get the charts that changed version
          chart_file_changed="$(echo $files_changed | grep -E 'Chart\.ya?ml' | xargs dirname | grep -o "charts/[^/]*" | sort | uniq || true)"
          echo "chart_file_changed=$chart_file_changed"

          # Initialize an empty array for version-changed charts
          version_changed_charts=()

          for chart in $chart_file_changed; do
            # Check if there's a version change in the Chart.yaml file
            if git show "$chart" | grep -q "+version"; then
              version_changed_charts+=("$chart")
            fi
          done
          
          # make the outputs
          if [ ${#version_changed_charts[@]} -gt 0 ]; then
            chart_names=$(printf "%s\n" "${version_changed_charts[@]}")
            echo "charts=${chart_names}" >>$GITHUB_OUTPUT
            echo "result=ok" >>$GITHUB_OUTPUT
          else
            echo "error=No version changed charts found" >>$GITHUB_OUTPUT
            echo "result=fail" >>$GITHUB_OUTPUT
          fi

          # print the outputs
          cat $GITHUB_OUTPUT
      - id: show-error
        name: 'Show error'
        if: ${{ steps.get-bumped-charts.outputs.result == 'fail' }}
        run: |
          echo "${{ steps.get-bumped-charts.outputs.error }}"
          echo "publish jobs/steps will be interrupted"
        # uses: actions/github-script@v6
        # with:
        #   script: |
        #       core.setFailed('${{ steps.get-bumped-charts.outputs.error }}')

  publish-charts-repository:
    runs-on: ubuntu-latest
    needs: get-bumped-charts
    if: ${{ needs.get-bumped-charts.outputs.result == 'ok' }}
    name: Publish Charts to registry
    permissions:
      contents: read
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v3
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Package Charts
        id: package-charts
        run: |
          publish_dir=.target
          mkdir -p $publish_dir
          version_changed_charts="${{needs.get-bumped-charts.outputs.charts}}"
          for dir in ${version_changed_charts}; do
            ls -la "$dir"
            helm package $dir --dependency-update --destination $publish_dir
          done
          ls -la $publish_dir

  publish-charts-github-release:
    runs-on: ubuntu-latest
    needs: get-bumped-charts
    if: ${{ needs.get-bumped-charts.outputs.result == 'ok' }}
    name: Publish Charts to Github
    permissions:
      contents: read
    steps:
      - id: generate_token
        name: Generate github token of Github Application
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - uses: actions/checkout@v3
        name: Checkout Repository
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.5.0
        env:
          CR_TOKEN: ${{ steps.generate_token.outputs.token }}
